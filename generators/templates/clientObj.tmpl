// {{ initialCap .Name }}Post posts the {{.Name}} object
func (c *ContivClient) {{ initialCap .Name }}Post(obj *{{ initialCap .Name }}) error {
	// build key and URL
	keyStr := {{range $index, $element := .Key}}{{if eq 0 $index }}obj.{{initialCap .}}{{else}} + ":" + obj.{{initialCap .}}{{end}}{{end}}
	url := c.baseURL + "/api/{{ .Name }}s/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating {{ .Name }} %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// {{ initialCap .Name }}List lists all {{ .Name }} objects
func (c *ContivClient) {{ initialCap .Name }}List() (*[]*{{ initialCap .Name }}, error) {
	// build key and URL
	url := c.baseURL + "/api/{{ .Name }}s/"

	// http get the object
	var objList []*{{ initialCap .Name }}
	err := httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting {{ .Name }}s. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// {{ initialCap .Name }}Get gets the {{ .Name }} object
func (c *ContivClient) {{ initialCap .Name }}Get({{range $index, $element := .Key}}{{if eq 0 $index }}{{ .}} string{{else}}, {{ .}} string{{end}}{{end}}) (*{{ initialCap .Name }}, error) {
	// build key and URL
	keyStr := {{range $index, $element := .Key}}{{if eq 0 $index }}{{ .}}{{else}} + ":" + {{ .}}{{end}}{{end}}
	url := c.baseURL + "/api/{{ .Name }}s/" + keyStr + "/"

	// http get the object
	var obj {{ initialCap .Name }}
	err := httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting {{ .Name }} %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// {{ initialCap .Name }}Delete deletes the {{ .Name }} object
func (c *ContivClient) {{ initialCap .Name }}Delete({{range $index, $element := .Key}}{{if eq 0 $index }}{{ .}} string{{else}}, {{ .}} string{{end}}{{end}}) error {
	// build key and URL
	keyStr := {{range $index, $element := .Key}}{{if eq 0 $index }}{{ .}}{{else}} + ":" + {{ .}}{{end}}{{end}}
	url := c.baseURL + "/api/{{ .Name }}s/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting {{ .Name }} %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}
